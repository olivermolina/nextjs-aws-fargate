# Use a specific version of the official Node.js image
FROM node:20.12.0-alpine3.19

# Set the working directory in the container
RUN mkdir -p /opt/app

WORKDIR /opt/app

# Install Chromium
RUN apk add --no-cache chromium

# Copy package.json and yarn.lock to the working directory
COPY package.json yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy the rest of your app's source code from your host to your image filesystem.
COPY . .

# Specify the variable you need
ARG NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN
ENV NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN=${NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN}
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
ARG STYTCH_PROJECT_ENV
ENV STYTCH_PROJECT_ENV=${STYTCH_PROJECT_ENV}
ARG STYTCH_PROJECT_ID
ENV STYTCH_PROJECT_ID=${STYTCH_PROJECT_ID}
ARG STYTCH_SECRET
ENV STYTCH_SECRET=${STYTCH_SECRET}
ARG CUSTOMER_IO_API_KEY
ENV CUSTOMER_IO_API_KEY=${CUSTOMER_IO_API_KEY}
ARG JWT_SECRET_KEY
ENV JWT_SECRET_KEY=${JWT_SECRET_KEY}
ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ARG SENDGRID_API_KEY
ENV SENDGRID_API_KEY=${SENDGRID_API_KEY}
ARG AWS_ACCESS_KEY_ID
ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ARG AWS_SECRET_ACCESS_KEY
ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
ARG AWS_S3_REGION
ENV AWS_S3_REGION=${AWS_S3_REGION}
ARG AWS_S3_BUCKET_NAME
ENV AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
ARG QSTASH_CURRENT_SIGNING_KEY
ENV QSTASH_CURRENT_SIGNING_KEY=${QSTASH_CURRENT_SIGNING_KEY}
ARG QSTASH_NEXT_SIGNING_KEY
ENV QSTASH_NEXT_SIGNING_KEY=${QSTASH_NEXT_SIGNING_KEY}
ARG QSTASH_URL
ENV QSTASH_URL=${QSTASH_URL}
ARG QSTASH_TOKEN
ENV QSTASH_TOKEN=${QSTASH_TOKEN}
ARG MESSAGEBIRD_API_KEY
ENV MESSAGEBIRD_API_KEY=${MESSAGEBIRD_API_KEY}
ARG NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
ENV NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
ARG STRIPE_SECRET_KEY
ENV STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
ARG STRIPE_WEBHOOK_SECRET
ENV STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
ARG NEXT_PUBLIC_STRIPE_CONNECT_CLIENT_ID
ENV NEXT_PUBLIC_STRIPE_CONNECT_CLIENT_ID=${NEXT_PUBLIC_STRIPE_CONNECT_CLIENT_ID}
ARG PUSHER_APP_ID
ENV PUSHER_APP_ID=${PUSHER_APP_ID}
ARG PUSHER_APP_SECRET
ENV PUSHER_APP_SECRET=${PUSHER_APP_SECRET}
ARG NEXT_PUBLIC_PUSHER_APP_KEY
ENV NEXT_PUBLIC_PUSHER_APP_KEY=${NEXT_PUBLIC_PUSHER_APP_KEY}
ARG NEXT_PUBLIC_PUSHER_APP_CLUSTER
ENV NEXT_PUBLIC_PUSHER_APP_CLUSTER=${NEXT_PUBLIC_PUSHER_APP_CLUSTER}
ARG NEXT_PUBLIC_GOOGLE_CLIENT_ID
ENV NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
ARG GOOGLE_CLIENT_SECRET
ENV GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
ARG WHO_ICD_API_CLIENT_ID
ENV WHO_ICD_API_CLIENT_ID=${WHO_ICD_API_CLIENT_ID}
ARG WHO_ICD_API_CLIENT_SECRET
ENV WHO_ICD_API_CLIENT_SECRET=${WHO_ICD_API_CLIENT_SECRET}
ARG DAILY_API_KEY
ENV DAILY_API_KEY=${DAILY_API_KEY}
ARG DAILY_REST_DOMAIN
ENV DAILY_REST_DOMAIN=${DAILY_REST_DOMAIN}

ENV GENERATE_SOURCEMAP=false
ENV NODE_ENV production
ENV PORT 80
ENV NEXT_TELEMETRY_DISABLED 1

# Build your Next.js app
RUN yarn build

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# You only need to copy next.config.js if you are NOT using the default configuration
#COPY /app/next.config.js ./
COPY ./public /opt/app/public
COPY --chown=nextjs:nodejs ./.next /opt/app/.next
COPY ./node_modules /opt/app/node_modules
COPY ./package.json /opt/app/package.json
COPY ./start.sh /opt/app/start.sh
RUN chmod +x /opt/app/start.sh

USER nextjs

ENV NEXT_TELEMETRY_DISABLED 1

# The command to run your app
ENTRYPOINT ["/opt/app/start.sh"]
